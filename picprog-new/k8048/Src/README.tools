Velleman K8048 Programmer for FreeBSD and others.
-------------------------------------------------------------------------------

 Copyright (c) 2005-2013 Darron Broad
 All rights reserved.

Licensed under the terms of the BSD license, see file LICENSE for details.
-------------------------------------------------------------------------------

gputils
=======
$ cd /usr/src
$ wget http://downloads.sourceforge.net/project/gputils/gputils/1.2.0/gputils-1.2.0.tar.gz
$ tar zxvf gputils-1.2.0.tar.gz
$ cd gputils-1.2.0
$ apt-get install build-essential
$ ./configure --prefix=/usr/local --disable-html-doc
$ make
$ make install

sdcc
====
$ cd /usr/src
$ wget http://downloads.sourceforge.net/project/sdcc/sdcc/3.3.0/sdcc-src-3.3.0.tar.bz2
$ tar jxvf sdcc-src-3.3.0.tar.bz2
$ cd sdcc-3.3.0
$ apt-get install bison flex stx-btree-dev libgc-dev libboost-all-dev
$ ./configure --prefix=/usr/local --enable-libgc
$ make 
$ make install

raspbian emulator
=================
It is not possible to build sdcc natively on a raspberry pi model A due to
memory contraints but we may build it on a high powered machine using an
emulator.

A cross compiler would be faster than this emulator but is considerably more
time consuming to get up and running.

See: http://superpiadventures.com/2012/07/development-environment/

Install emulator on emulator host machine.

$ apt-get install qemu-user-static
$ apt-get install debootstrap
$ mkdir -p /embedded/raspbian/dev
$ mkdir -p /embedded/raspbian/proc
$ mkdir -p /embedded/raspbian/sys
$ qemu-debootstrap --no-check-gpg --arch armhf wheezy /embedded/raspbian http://archive.raspbian.org/raspbian

Enter emulator and initialise.

$ mount -o bind /dev /embedded/raspbian/dev
$ mount -t proc proc /embedded/raspbian/proc
$ mount -t sysfs sysfs /embedded/raspbian/sys
$ setenv QEMU_CPU arm1176
$ chroot /embedded/raspbian /bin/bash
$ echo "deb http://archive.raspbian.org/raspbian/ wheezy main contrib non-free rpi" > /etc/apt/sources.list
$ wget http://archive.raspbian.org/raspbian.public.key -O - | apt-key add -
$ apt-get update
$ apt-get install locales
$ dpkg-reconfigure locales 

Compile gputils in the emulator and install, afterwards compile sdcc and copy
both builds for installation on the target machine.

raspbian kernel module mc-icsp and mc-icsp-gpio-custom
======================================================
Determine the running kernel and it's config on the Raspberry Pi target machine.

$  uname -a
Linux pi3 3.6.11+ #538 PREEMPT Fri Aug 30 20:42:08 BST 2013 armv6l GNU/Linux
$ zgrep "* firmware as of" /usr/share/doc/raspberrypi-bootloader/changelog.Debian.gz | head -1 | awk '{ print $5 }'
d4f5315cfac4e
$ zcat /proc/config.gz > d4f5315cfac4e.config

On the build host fetch the equivalent R-PI firmware.

$ mkdir -p /embedded/raspbian/build/
$ cd /embedded/raspbian/build/
$ git clone https://github.com/raspberrypi/firmware
$ cd /embedded/raspbian/build/firmware
$ git checkout d4f5315cfac4e
$ git reset --hard

Determine the kernel hash for this firmware.

$ cat /embedded/raspbian/build/firmware/extra/git_hash 
1587f775d0a3c437485262ba951afc5e30be69fa

Fetch the kernel source for this hash.

$ cd /embedded/raspbian/build/
$ git clone https://github.com/raspberrypi/linux.git
$ cd /embedded/raspbian/build/linux
$ git checkout 1587f775d0a3c437485262ba951afc5e30be69fa
$ git reset --hard

Fetch the kernel build tools.

$ cd /embedded/raspbian/build/
$ git clone git://github.com/raspberrypi/tools.git

Build the kernel using the tools.

$ cd /embedded/raspbian/build/linux
$ scp pi@pi:d4f5315cfac4e.config .
$ cp d4f5315cfac4e.config .config
$ make ARCH=arm oldconfig
$ make ARCH=arm CROSS_COMPILE=/embedded/raspbian/build/tools/arm-bcm2708/arm-bcm2708hardfp-linux-gnueabi/bin/arm-bcm2708hardfp-linux-gnueabi- -j 8

Build the ICSP modules from the k8048 build directory.

$ cd $HOME/k8048/Src/lpicp/openwrt-files/
$ ln -sf Makefile.raspbian Makefile
$ make 
$ find . -name "*.ko" -exec scp {} pi@pi: \;

Install the modules on the Raspberry Pi target machine.

$ mkdir -p /lib/modules/3.6.11+/kernel/local/
$ cp mc-icsp*ko /lib/modules/3.6.11+/kernel/local/
$ chown -R 0:0 /lib/modules/3.6.11+/kernel/local/
$ depmod -a

Load modules on target machine.

$ modprobe mc-icsp
$ modprobe mc-icsp-gpio-custom mc_icsp=4,24,25,22
$ mknod /dev/icsp0 c 245 0
$ chmod 666 /dev/icsp0
