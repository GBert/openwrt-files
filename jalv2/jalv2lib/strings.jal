-- Title: Strings Library
-- Author: Matthew Schinkel - borntechi.com, copyright (c) 2009, all rights reserved.
-- Adapted-by: Oliver "Kiste" Seitz 
-- Compiler: >=2.4k
-- Revision: $Revision: 3212 $
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: Library for managing strings.
--
-- Sources:
--

include characters

--------------------------------------------------------------------------------
-- compare two strings to see if they are the same. not case dependant.
-- strings can optionally be terminated with a null character.
-- (null character = 0).
--------------------------------------------------------------------------------
function string_compare(byte in string1[], byte in string2[]) return bit is
   var byte step, s1, s2
   var bit check = TRUE

   step = 0
   forever loop
      s1 = string1[step]
      s2 = string2[step]

      -- check for null character
      if (s1 == ASCII_NULL) | (s2 == ASCII_NULL) then
         if (s1 + s2) == 0 then
            return TRUE
         else
            return FALSE
         end if
      end if

      -- convert both to lower case
      char_lower(s1)
      char_lower(s2)

      -- check if they are different
      if !(s1 == s2) then
         return FALSE
      end if

      if count(string1) == count(string2) then
         if step == (count(string1) - 1) then
            return TRUE
         end if
      elsif step == (count(string1) - 1) then
         if string2[step + 1] == ASCII_NULL then
            return TRUE
         else
            return FALSE
         end if
      elsif step == (count(string1) - 1) then
         if string1[step + 1] == ASCII_NULL then
            return TRUE
         else
            return FALSE
         end if
      end if
      step = step + 1
   end loop
end function

--------------------------------------------------------------------------------
-- compare two strings to see if they are the same. case dependant.
-- strings can optionally be terminated with a null character.
-- (null character = 0).
--------------------------------------------------------------------------------
function string_compare_case(byte in string1[], byte in string2[]) return bit is
   var byte step, s1, s2
   var bit check = TRUE

   step = 0
   forever loop
      s1 = string1[step]
      s2 = string2[step]

      -- check for null character
      if (s1 == ASCII_NULL) | (s2 == ASCII_NULL) then
         if (s1 + s2) == 0 then
            return TRUE
         else
            return FALSE
         end if
      end if

      -- check if they are different
      if !(s1 == s2) then
         return FALSE
      end if

      if count(string1) == count(string2) then
         if step == (count(string1) - 1) then
            return TRUE
         end if
      elsif step == (count(string1) - 1) then
         if string2[step + 1] == ASCII_NULL then
            return TRUE
         else
            return FALSE
         end if
      elsif step == (count(string1) - 1) then
         if string1[step + 1] == ASCII_NULL then
            return TRUE
         else
            return FALSE
         end if
      end if
      step = step + 1
   end loop
end function

--------------------------------------------------------------------------------
-- compare the middle of string1 with string2
-- string1 must be >= length of string2
--------------------------------------------------------------------------------
function string_compare_mid(byte in string1[], byte in start, byte in string2[]) return bit is
   var bit check = 1
   var byte step
   var byte step2 = start

   if ((start + count(string2)) > count(string1)) then
      check = 0
      return
   else
      for count(string2) using step loop

         -- convert both to lower case
         var byte s1 = string1[step2]
         var byte s2 = string2[step]
         char_lower(s1)
         char_lower(s2)

         -- check if they are the same
         if !(s1 == s2) then
            check = 0
         end if

         step2 = step2 + 1
      end loop
   end if

   return check
end function

--------------------------------------------------------------------------------
-- compare the middle of string1 with string2. case sensitive.
-- string1 must be >= length of string2
--------------------------------------------------------------------------------
function string_compare_mid_case(byte in string1[], byte in start, byte in string2[]) return bit is
   var bit check = 1
   var byte step
   var byte step2 = start

   if ((start + count(string2)) > count(string1)) then
      check = 0 -- error, length is too long
      return
   else
      for count(string2) using step loop
         if !(string1[step] == string2[step]) then
            check = 0
         end if

         step2 = step2 + 1
      end loop
   end if

   return check
end function

--------------------------------------------------------------------------------
-- return string length
--------------------------------------------------------------------------------
function string_length(byte in str[]) return byte is
   var byte i = 0
   while (str[i] != ASCII_NULL) & (i != count(str) - 1) loop
      i = i + 1
   end loop
   return i
end function

--------------------------------------------------------------------------------
-- Convert a string representing a number into the actual number, as dword.
-- The Number may fill the whole array, or can be terminated by any non-number
-- character. If the first character is not a number, zero is returned.
-- If the number is too large, a wrong value is returned without notice.
--------------------------------------------------------------------------------
function string_to_dword(byte in chars[]) return dword is
  var dword num = 0
  var byte idx = 0

  while (idx<count(chars)) & (chars[idx]>="0") & (chars[idx]<="9") loop
    num = num * 10
    num = num + chars[idx] - "0"
    idx=idx+1
  end loop

  return num

end function
  
--------------------------------------------------------------------------------
-- Convert a string representing a number into the actual number, as sdword.
-- The Number may fill the whole array, or can be terminated by any non-number
-- character. Signs ("+" or "-") are allowed as first char only, any subsequent 
-- sign will terminate the conversion.
-- If the number is too large, a wrong value is returned without notice.
--------------------------------------------------------------------------------
function string_to_sdword(byte in chars[]) return sdword is

  if chars[0]=="+" then
    chars[0]="0"
  end if

  if chars[0]=="-" then
    chars[0]="0"
    return - sdword(string_to_dword(chars))
  else
    return sdword(string_to_dword(chars))
  end if

end function

--------------------------------------------------------------------------------
-- Convert a string representing a number into the actual number, as dword.
-- String can be NULL terminated, or full contained, that is, filling the
-- complete array. Old version of the function.
--------------------------------------------------------------------------------
function string_to_dword_old(byte in chars[]) return dword is
   var dword mul = 1
   var dword num = 0
   var byte idx = 0
   -- search NULL to know decimals
   for count(chars) using idx loop
      if chars[idx] == ASCII_NULL then
         mul = mul / 10
         exit loop
      end if
      -- inc. multiplier
      mul = mul * 10
   end loop

   idx = 0
   while mul != 0 loop
      num = num + ((chars[idx] - "0") * mul)
      mul = mul / 10
      idx = idx + 1
   end loop
   return num
end function


